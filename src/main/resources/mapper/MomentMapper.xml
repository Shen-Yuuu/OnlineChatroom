<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.java_chatroom.model.MomentMapper">

    <insert id="insertMoment" parameterType="com.example.java_chatroom.model.Moment" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO moment (user_id, content, create_time)
        VALUES (#{userId}, #{content}, NOW())
    </insert>

    <delete id="deleteMoment">
        DELETE FROM moment WHERE id = #{id} AND user_id = #{userId}
    </delete>

    <!-- 修改为JOIN查询以获取用户名 -->
    <select id="selectAllMoments" resultType="com.example.java_chatroom.model.Moment">
        SELECT m.id, m.user_id AS userId, u.username, m.content, m.create_time AS createTime,
               (SELECT COUNT(*) FROM moment_like WHERE moment_id = m.id) AS likeCount,
               (SELECT COUNT(*) > 0 FROM moment_like WHERE moment_id = m.id AND user_id = #{userId}) AS likedByCurrentUser
        FROM moment m
                 JOIN user u ON m.user_id = u.userId
        ORDER BY m.create_time DESC
    </select>

    <select id="selectMomentById" resultType="com.example.java_chatroom.model.Moment">
        SELECT id, user_id AS userId, content, create_time AS createTime
        FROM moment
        WHERE id = #{id}
    </select>

    <select id="selectMomentsByUserId" resultType="com.example.java_chatroom.model.Moment">
        SELECT id, user_id AS userId, content, create_time AS createTime
        FROM moment
        WHERE user_id = #{userId}
        ORDER BY create_time DESC
    </select>
    <select id="existsLike" resultType="boolean">
        SELECT EXISTS(
            SELECT 1
            FROM moment_like
            WHERE moment_id = #{momentId} AND user_id = #{userId}
        )
    </select>
    <!-- 查询当前用户好友和自己的动态 -->
    <select id="selectAllMomentsByFriend" resultType="com.example.java_chatroom.model.Moment">
        SELECT m.id, m.user_id AS userId, u.username, m.content, m.create_time AS createTime,
               (SELECT COUNT(*) FROM moment_like WHERE moment_id = m.id) AS likeCount,
               (SELECT COUNT(*) > 0 FROM moment_like WHERE moment_id = m.id AND user_id = #{userId}) AS likedByCurrentUser
        FROM moment m
                 JOIN user u ON m.user_id = u.userId
        WHERE m.user_id IN (
            SELECT friendId FROM friend WHERE userId = #{userId}
        ) OR m.user_id = #{userId}
        ORDER BY m.create_time DESC
    </select>

</mapper>
